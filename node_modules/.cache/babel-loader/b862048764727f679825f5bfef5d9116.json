{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\hangman\\\\src\\\\Keyboard.js\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Keyboard = _ref => {\n  let {\n    guessedChars,\n    setGuessedChars,\n    setCount,\n    count,\n    toGuessC\n  } = _ref;\n  let charList = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'å', 'ä', 'ö'];\n\n  function checkGuess(toGuessC, guessedChars) {\n    for (let char of toGuessC) {\n      if (char === guessedChars[guessedChars.length - 1]) return true;\n    }\n\n    return false;\n  }\n\n  function buttonPressed(id) {\n    let char = id.target.innerHTML;\n    guessedChars = [...guessedChars, char];\n    setGuessedChars(guessedChars);\n    let flag = true;\n    if (guessedChars.length > 0) flag = checkGuess(toGuessC, guessedChars);\n\n    if (!flag) {\n      let temp = count + 1;\n      setCount(temp);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [charList.slice(0, 10).map(value => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        name: value,\n        className: \"keyboard\",\n        id: 'key_' + {\n          value\n        },\n        onClick: e => buttonPressed(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 24\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), charList.slice(10, 20).map(value => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        name: value,\n        className: \"keyboard\",\n        id: 'key_' + {\n          value\n        },\n        onClick: e => buttonPressed(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 24\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), charList.slice(20, 30).map(value => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        name: value,\n        className: \"keyboard\",\n        id: 'key_' + {\n          value\n        },\n        onClick: e => buttonPressed(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 24\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Keyboard;\nexport default Keyboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"sources":["C:/js/hangman/src/Keyboard.js"],"names":["Button","Keyboard","guessedChars","setGuessedChars","setCount","count","toGuessC","charList","checkGuess","char","length","buttonPressed","id","target","innerHTML","flag","temp","slice","map","value","e"],"mappings":"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","sourcesContent":["import Button from \"./Button\";\r\n\r\nconst Keyboard = ({guessedChars,setGuessedChars,setCount,count,toGuessC}) => {\r\n\r\n    let charList=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','r','s','t','u','v','w','x','y','å','ä','ö']\r\n    function checkGuess(toGuessC,guessedChars){\r\n        for(let char of toGuessC){\r\n            if (char === guessedChars[guessedChars.length-1])return true;\r\n        }\r\n        return false;\r\n    }\r\n    function buttonPressed(id){\r\n        let char = id.target.innerHTML;\r\n        guessedChars = [...guessedChars,char];\r\n        setGuessedChars(guessedChars);\r\n        let flag = true;\r\n        if (guessedChars.length>0)flag = checkGuess(toGuessC,guessedChars);\r\n        if(!flag){\r\n            let temp = count+1;\r\n            setCount(temp);\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n              charList.slice(0,10).map((value)=>{\r\n                return <Button name = {value} className = \"keyboard\" id={'key_'+{value}} onClick = {(e) => buttonPressed(e)} />  \r\n              })  \r\n            }\r\n            <br/>\r\n            {\r\n              charList.slice(10,20).map((value)=>{\r\n                return <Button name = {value} className = \"keyboard\" id={'key_'+{value}} onClick = {(e) => buttonPressed(e)} />  \r\n              })  \r\n            }\r\n            <br/>\r\n            {\r\n              charList.slice(20,30).map((value)=>{\r\n                return <Button name = {value} className = \"keyboard\" id={'key_'+{value}} onClick = {(e) => buttonPressed(e)} />  \r\n              })  \r\n            }\r\n            <br/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Keyboard\r\n"]},"metadata":{},"sourceType":"module"}